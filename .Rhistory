usethis::edit_r_environ()
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- my_sqrt/z
my_div <- z/ my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create(mytest.R)
file.create("mytest.R")
dir()
file.exists("mystest.R")
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R" , "mytest2.R")
file.copy("mytest2.R" , "mytest3.R")
file.path("mytest3.R")
file.path('folder1' , 'folder2')
?dir.create
dir.create(file.path("testdir2" , "testdir3"), recursive = TRUE)
setwd(old.dir)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace= TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace= TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100, 25, 10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
ist(cm)
hist(cm)
swirl()
swirl()
ls()
class(plants)
library(lubridate)
?wday
wday("2023-01-31")
wday("2023-01-31",week_start= 1)
days <- seq(as.Date("2023-01-31"), as.Date("2023-09-03"), by = "days" )
days
wday(days)
wday(days,week_start = 1)
wday(days,week_start = 1) == 3
sum(wday(days,week_start = 1) == 3)
sum(wday(days,week_start = 1) == 3) * 8
count_hours <- function(start_date, end_date, week_day) {
days <- seq(as.Date(start_date), as.Date(end_date), by = "days" )
sum(wday(days,week_start = 1) == week_day) * 8
}
count_hours("2023-01-31","2023-09-03", 3)
period_2 <- count_hours("2024-04-02","2023-05-06", 5)
period_2 <- count_hours("2024-04-02","2024-05-06", 5)
period_2
count_hours <- function(start_date, end_date, week_day) {
days <- seq(as.Date(start_date), as.Date(end_date), by = "days" )
sum(wday(days,week_start = 1) %in% week_day) * 8
}
period_1 <- count_hours("2023-01-31","2023-09-03", 3)
period_2 <- count_hours("2024-04-02","2024-05-06", 1:5)
period_2
period_3 <- count_hours("2024-05-13","2024-12-29", 5)
period_3
period_4 <- count_hours("2024-12-30","2025-01-26", 5)
period_4
period_5 <- count_hours("2025-01-31","2025-03-28", 5)
period_5
ls()
?str_subset
??str_subset
str_subset(ls(), "period")
library(stringr)
str_subset(ls(), "period")
periods <- str_subset(ls(), "period")
sum(periods)
periods
sum(get(periods))
periods <- str_subset(ls(), "period") |>
mget()
periods
mget(period_names) |>
unlist()
period_names <- str_subset(ls(), "period")
mget(period_names) |>
unlist()
x <- mget(period_names)
x
x[period_names]
period_names
period_names <- str_subset(ls(), "period_")
period_names
period_names <- str_subset(ls(), "period_[0-9]+")
period_names
period_names <- str_subset(ls(), "period_[0-9]+")
mget(period_names)
str_subset(ls(), "period_[0-9]+") |>
mget() |> unlist()
periods <- str_subset(ls(), "period_[0-9]+") |>
mget() |> unlist()
sum(periods)
2*520 - sum(periods)
224/8
(2*520 - sum(periods))/8
# Load packages.
library(tidytuesdayR)
install.packages("tidytuesdayR")
# Load packages.
library(tidytuesdayR)
library(dplyr)
library(ggplot2)
# Load the dataset from a recent week.
tt_raw_df <- tt_load(x = 2024, week = 19)
# Run the object for explanation.
tt_raw_df
# Extract the data.
tt_df <- tt_raw_df$rolling_stone
# Explore it.
glimpse(tt_df)
head(tt_df)
summary(tt_df)
# Frequency counts of artists.
tt_df %>%
group_by(clean_name) %>%
tally() %>%
ungroup() %>%
arrange(desc(n)) %>%
slice(1:20)
# Relationship between spotify popularity and billboard.
ggplot(data = tt_df) +
geom_point(mapping = aes(x = weeks_on_billboard, y = spotify_popularity) )
# Use a flag for outliers.
tt_df <- tt_df %>%
mutate(outlier_flag = if_else(spotify_popularity < 20 | weeks_on_billboard > 300,
"yes", "no"))
# Annotated plot.
ggplot() +
geom_point(data = tt_df,
mapping = aes(x = weeks_on_billboard, y = spotify_popularity,
colour = release_year), size = 3) +
geom_text(data = tt_df %>%
filter(outlier_flag == "yes"),
mapping = aes(x = weeks_on_billboard, y = spotify_popularity,
label = clean_name), hjust = -0.1, vjust = 0.5) +
labs("Spotify & billboard popularity.", colour = "Release \nyear",
x = "Weeks on billboard", y = "Spotify popularity") +
scale_colour_viridis_c() +
theme_bw()
# Save.
ggsave(filename = "visuals/session1/scatterplot.png",
height = 12, width = 15, unit = "cm", dpi = 300)
# Load packages.
library(tidytuesdayR)
library(dplyr)
library(ggplot2)
library(patchwork)
# Set theme
theme_set(theme_bw())
# Load the dataset from a recent week.
tt_raw_df <- tt_load(x = 2024, week = 19)
# Run the object for explanation.
tt_raw_df
# Extract the data.
tt_df <- tt_raw_df$rolling_stone
# Relationship between spotify popularity and billboard (basic).
scat_gg <- ggplot(data = tt_df) +
geom_point(mapping = aes(x = weeks_on_billboard, y = spotify_popularity,
colour = release_year) ) +
scale_colour_viridis_c() +
labs(title = "Popularity (scatter)",
x = "Weeks on billboard", y = "Spotify popularity",
colour = "Release year") +
# Rough fix for patchwork alignment.
theme(axis.title.y = element_text(vjust = -15))
# Box.
box_gg <- tt_df %>%
filter(!is.na(artist_gender)) %>%
ggplot() +
geom_boxplot(mapping = aes(x = ave_age_at_top_500,
y = artist_gender,
fill = artist_gender),
alpha = 0.5) +
labs(title = "Age distribution (boxplot)",
x = NULL, y = NULL) +
theme(legend.position = "none")
# Density.
dens_gg <- ggplot(data = tt_df) +
geom_density(mapping = aes(x = ave_age_at_top_500,
fill = artist_gender),
alpha = 0.5) +
labs(title = "Age distribution (density)",
fill = NULL, x = NULL, y = NULL) +
theme(legend.position = "bottom")
# Bar plot.
bar_gg <- tt_df %>%
group_by(type) %>%
tally() %>%
ggplot() +
geom_col(mapping = aes(x = reorder(type, n), y = n),
fill = "grey20") +
coord_flip() +
labs(title = "Album type (bar)", y = NULL, x = NULL)
# Arrange them.
full_plot <- dens_gg + box_gg + bar_gg + scat_gg +
plot_annotation(tag_levels = "A")
full_plot
bar_gg
dens_gg
scat_gg
tt_df
3551 *1.037
24+16
40/8
install.packages("rmarkdown")
renv::status()
install.packages("xkcd")         # For xkcd-style
install.packages("extrafont")    # For font handling
library(ggplot2)
library(xkcd)
library(extrafont)
# Load comic fonts
font_import(pattern = "xkcd")  # Import the 'xkcd' font if available
font_import(pattern = "xkcd")  # Import the 'xkcd' font if available
loadfonts()  # Load all fonts
# Ensure the xkcd font is used in the plot
theme_xkcd <- theme(
text = element_text(family = "xkcd"),
axis.text = element_text(family = "xkcd"),
axis.title = element_text(family = "xkcd")
)
# Sample data for the plot
categories <- c("A", "B", "C", "D")
values <- c(4, 7, 1, 8)
df <- data.frame(categories, values)
# Create the xkcd-style bar plot
p <- ggplot(df, aes(x = categories, y = values)) +
geom_bar(stat = "identity") +
labs(title = "Hand-drawn Style Bar Plot", x = "Categories", y = "Values") +
theme_xkcd  # Apply the XKCD theme
# Display the plot
print(p)
library(stringr)
count_hours <- function(start_date, end_date, week_day) {
days <- seq(as.Date(start_date), as.Date(end_date), by = "days" )
sum(wday(days,week_start = 1) %in% week_day) * 8
}
periods <- str_subset(ls(), "period_[0-9]+") |>
mget() |> unlist()
periods
(2*520 - sum(periods))/8
period_2 <- count_hours("2024-04-02","2024-05-08", 1:5)
library(lubridate)
period_2 <- count_hours("2024-04-02","2024-05-08", 1:5)
period_2
period_1 <- count_hours("2023-01-31","2023-09-03", 3)
period_2 <- count_hours("2024-04-02","2024-05-06", 1:5)
period_3 <- count_hours("2024-05-13","2024-12-20", 5)
period_4 <- count_hours("2024-12-30","2025-01-26", 5)
period_5 <- count_hours("2025-01-31","2025-03-28", 5)
periods <- str_subset(ls(), "period_[0-3]+") |>
mget() |> unlist()
(2*520 - sum(periods))/8
periods
period_1 <- count_hours("2023-01-31","2023-09-03", 3)
period_2 <- count_hours("2024-04-02","2024-05-06", 1:5)
period_3 <- count_hours("2024-05-13","2024-12-13", 5)
period_4 <- count_hours("2024-12-30","2025-01-26", 5)
period_5 <- count_hours("2025-01-31","2025-03-28", 5)
periods <- str_subset(ls(), "period_[0-3]+") |>
mget() |> unlist()
periods
(2*520 - sum(periods))/8
period_5 <- count_hours("2025-01-03","2025-03-30", 5)
period_5
(2*520 - sum(periods))
library(httr)
url <- "https://api.datacite.org/client-prefixes"
queryString <- list(prefix-id = "10.4121")
library(httr)
url <- "https://api.datacite.org/client-prefixes"
queryString <- list(prefix-id = "10.4121")
queryString <- list(prefix_id = "10.4121")
response <- VERB("GET", url, query = queryString, content_type("application/octet-stream"), accept("application/vnd.api+json"))
content(response, "text")
rl <- "https://api.datacite.org/dois"
queryString <- list(prefix = "10.4121")
response <- VERB("GET", url, query = queryString, content_type("application/octet-stream"), accept("application/vnd.api+json"))
content(response, "text")
renv::init()
renv::restore()
renv::init()
renv::status()
getwd()
setwd(C:\Users\awilczynski\Desktop\R Cafe\RUM-UMC\Quarto\slides)
setwd("C:/Users/awilczynski/Desktop/R Cafe/RUM-UMC/Quarto/slides")
renv::status()
renv::restore()
renv::status()
renv::restore()
renv::init()
renv::status()
install.packges("countdown")
install.packages("countdown")
renv::snapshot()
renv::snapshot()
renv::activate()
renv::status()
renv::snapshot()
renv::snapshot()
renv::status()
renv::restore()
